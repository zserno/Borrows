<?php

/**
 * @file
 *   Main module file.
 */

define("BORROWS_RESOURCE_CT", "bookingsapi_resource");
define("BORROWS_PREBOOKING_DAYS", "60");

/**
 * Implementation of hook_menu().
 */
function borrows_menu() {
  $items['borrows_ajax'] = array(
    'page callback' => 'borrows_ajax',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['borrows_booking'] = array(
    'page callback' => 'borrows_booking',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['borrows-review'] = array(
    'page callback' => 'borrows_review_page',
    //'page arguments' => array('borrows_review_form'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/borrows'] = array(
    'title'            => 'Borrows settings',
    'description'      => 'Configure Borrows module.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('borrows_admin_form'),
    'access arguments' => array('administer borrows configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'borrows.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function borrows_perm() {
  return array('administer borrows configuration');
}

/**
 * Implementation of hook_calendar_block().
 */
function borrows_calendar_block(&$calendar, &$date, $op) {
  switch($op) {
    case 'load':

      // @TODO Translate them properly.
      $calendar->weekdays = array(
        'mo' => 'H',
        'tu' => 'K',
        'we' => 'SZ',
        'th' => 'CS',
        'fr' => 'P',
        'sa' => 'SZ',
        'su' => 'V',
      );
      $path = drupal_get_path('module', 'borrows');
      drupal_add_css($path . '/css/borrows.css');
      drupal_add_js($path . '/js/jquery.blockUI.js');
      drupal_add_js($path . '/js/borrows.js', 'module', 'footer');
      drupal_add_js(array('borrows' => borrows_get_settings()), 'setting', 'footer');
      $calendar->nid = arg(1);
      break;
    case 'alter':
      $is_weekend = in_array($date->weekday, array('sa', 'su'));

      // Do not allow booking for past days, today and tomorrow.
      // strtotime() needs a bit of help.
      $day = strtotime($date->day . '-' . $date->month . '-' . $date->year);
      $prebooking = variable_get('borrows_prebooking', BORROWS_PREBOOKING_DAYS);
      $is_allowed = ($day >= (strtotime('tomorrow') + (24 * 60 * 60)) && $day <= strtotime('today') + $prebooking * 24 * 60 * 60);

      // Convert to hungarian date format to make comparison easy.
      $date_hu = date('Y-m-d', strtotime($date->year . '-' . $date->month . '-' . $date->day));

      // Mark weekday as weekend, if $day is a public holiday.
      if (!$is_weekend) {
        $holidays = explode("\r\n", variable_get('borrows_holidays', NULL));
        if (in_array($date_hu, array_values((array)$holidays))) {
          $is_weekend = TRUE;
        }
      }
      // Remove weekday flag, if $day is a working day.
      if ($is_weekend) {
        $weekends = explode("\r\n", variable_get('borrows_weekends', NULL));
        if (in_array($date_hu, array_values((array)$weekends))) {
          $is_weekend = FALSE;
        }
      }

      // Check if current day is bookable using bookingsapi.
      $record = array(
        'resource_id' => $calendar->nid,
        'start' => $date_hu . ' 01:00:00',
        'end' => $date_hu . ' 23:59:59',
      );
      $is_bookable = (bookingsapi_conflict_check($record) == BOOKINGSAPI_CONFLICTS_NO);

      if ($is_allowed) {
        if ($is_bookable) {
          $class = 'form-checkbox';
          // Mark weekends with a nice class.
          if ($is_weekend) {
            $class .= ' borrows-weekend';
          }

          $date->content  = '<label class="option" for="' . $date_hu . '">';
          $date->content .= '<input type="checkbox" name="borrowdate[' . $date_hu . ']" value="' . $date_hu . '" id="borrowdate-' . $date_hu. '" class="' . $class . '" />';
          $date->content .= $date->day . '</label>';
        }
        else {
          $date->content = '<span class="borrows-booked">' . $date->day . '</span>';
        }
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function borrows_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'bookingsapi_resource_node_form') {
    $form['field_ba_location']['#access'] = FALSE;
    $form['field_ba_parent']['#access'] = FALSE;
    $form['field_ba_defaultavailability']['#access'] = FALSE;
  }
}

/**
 * AJAX callback.
 * @return Number of allowed days for a booking.
 */
function borrows_ajax($nid = NULL) {
  if ($node = node_load($nid)) {
    if ($node->type == BORROWS_RESOURCE_CT) {
      $node_allowed_days = $node->field_allowed_days[0]['value'];

      // @TODO implement this using bookingsapi.
      $days_till_next_booking = 30;

      $prebooking = variable_get('borrows_prebooking', BORROWS_PREBOOKING_DAYS);

      $booking_info = array(
        'allowed_days' => min($node_allowed_days, $days_till_next_booking, $prebooking),
      );

      return drupal_json($booking_info);
    }
  }
  return drupal_json();
}

/**
 * Handle booking request.
 * @see borrows_review_form_submit.
 */
function borrows_booking($node, $start, $end, $phone, $comment) {
  // And here we go.
  $booking = array(
    'resource_id' => $node->nid,
    'type' => BOOKINGSAPI_BOOKING,
    'name' => check_plain($phone),
    'description' => check_plain($comment),
    'start' => $start . ' 02:00:00', // Prevent timezone issues.
    'end' => $end . ' 23:59:59',
    'status' => BOOKINGSAPI_STATUS_FINALIZED,
  );

  $booking_result = bookingsapi_booking_save($booking);
  $success = $booking_result[0];

  // We've got some problem.
  $message = '';
  if ($booking_result[0] === FALSE) {
    // SQL issue.
    if ($booking_result[1] === FALSE) {
      $message = t('SQL issue.');
    }
    // Conflict.
    //$message = bookingsapi_conflict_type($booking_result[1]);
    $message = t('conflicting dates');
  }

  return array('success' => $success, 'message' => $message);
}


function borrows_review_page() {
  $node = node_load($_POST['borrows_nid']);
  $start = $_POST['borrows_start'];
  $end = $_POST['borrows_end'];

  return drupal_get_form('borrows_review_form', $node, $start, $end);
}

/**
 * Booking review form.
 */
function borrows_review_form($form_state, $node, $start, $end) {
  // Check if $form is submitted, and if so,
  // restore POSTed data from calendar.
  // This way validation error won't loose booking parameters.
  if (isset($form_state['post']['op'])) {
    $post = $form_state['post'];
    $node = node_load($post['nid']);
    $start = $post['start'];
    $end = $post['end'];
  }

  $form['borrows_details'] = array(
    '#value' => theme('borrows_details', $node),
    //'#value' => theme('borrows_details', $node) . $start . '|' . $end,
  );

  $form['borrows_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone number'),
    '#description' => t('Enter your phone number(s) so we can contact you in case of any issues regarding your booking.'),
    '#size' => 64,
    '#maxlength' => 64,
    '#required' => TRUE,
  );

  $form['borrows_comment'] = array(
    '#type' => 'textarea',
    '#title' => t('Questions, comments'),
    '#description' => t('You can enter your comments here.'),
  );

  $form['borrows_terms'] = array(
    '#type' => 'checkbox',
    // Core bug: http://drupal.org/node/259292.
    '#title' => t('I accept !terms.', array('!terms' => l(t('terms and conditions'), 'node', array('attributes' => array('target' => '_blank'))))) . '<span class="form-required" title="This field is required.">*</span>',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit booking'),
  );

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  $form['start'] = array(
    '#type' => 'hidden',
    '#value' => check_plain($start),
  );

  $form['end'] = array(
    '#type' => 'hidden',
    '#value' => check_plain($end),
  );

  return $form;
}

// @TODO implement me.
// @TODO validate dates and nid.
/**
 * Validate callback.
 * @see borrows_review_form.
 */
function borrows_review_form_validate($form, &$form_state) {
  // Help FAPI to handle required checkbox.
  // See: http://drupal.org/node/259292.
  if ($form_state['values']['borrows_terms'] != 1) {
    form_set_error('borrows_terms', t('You have to accept terms and conditions.'));
  }
  return TRUE;
}

/**
 * Submit callback.
 * @see borrows_review_form.
 */
function borrows_review_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  // @OTOD Find out why $values does not hold POSTed values from calendar.
  $post = $form_state['clicked_button']['#post'];
  list($node, $start, $end) = array(node_load($post['nid']), $post['start'], $post['end']);
  list($phone, $comment) = array($values['borrows_phone'], $values['borrows_comment']);

  // Record booking.
  $result = borrows_booking($node, $start, $end, $phone, $comment);

  // Show if booking was successful.
  if ($result['success'] === TRUE) {
    drupal_set_message(t('Booking was successful.'));
  }
  else {
    drupal_set_message(t('Booking failed. Reason: @reason.', array('@reason' => $result['message'])));
  }

  $form_state['redirect'] = 'node/' . $node->nid;
}

/**
 * Implementation of hook_theme().
 */
function borrows_theme() {
  return array(
    'borrows_details' => array(
      'arguments' => array('node' => null),
    ),
  );
}

/**
 * Render booking details on the review page.
 * @see borrows_review_form.
 */
function theme_borrows_details($node) {
  $location = content_format('field_borrow_location', $node->field_borrow_location[0]);

  $info = array(
    t('Location of the product: !location.', array('!location' => $location)),
  );

  return theme('item_list', $info);
}

/************************************/

/**
 * Get couple settings for client side actions.
 */
function borrows_get_settings() {
  $node = menu_get_object();
  $holidays = explode("\r\n", variable_get('borrows_holidays', NULL));
  $weekends = explode("\r\n", variable_get('borrows_weekends', NULL));
  return array(
    'holidays' => $holidays,
    'weekends' => $weekends,
    'nid' => $node->nid,
    'ajax_path' => url('borrows_booking'),
  );
}

/**
 * Private function that returns a booking result in JSON.
 * @param $success
 *  Boolean, whether booking was successful.
 * @param $message
 *  String, if $success == FALSE then it holds a short error message.
 * @return
 *  JSON object, {success, message}.
 */
function _borrows_booking_response($success = TRUE, $message = NULL) {
  $response = array(
    'success' => $success,
    'message' => $message,
  );
  return drupal_json($response);
}
