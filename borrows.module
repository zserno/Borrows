<?php

/**
 * @file
 *   Main module file.
 */

define("BORROWS_RESOURCE_CT", "bookingsapi_resource");
define("BORROWS_PREBOOKING_DAYS", "60");

/**
 * Implementation of hook_menu().
 */
function borrows_menu() {
  $items['borrows_ajax'] = array(
    'page callback' => 'borrows_ajax',
    'access arguments' => array('access content'), // @TODO Adjust.
    'type' => MENU_CALLBACK,
  );
  $items['borrows_booking'] = array(
    'page callback' => 'borrows_booking',
    'access arguments' => array('access content'), // @TODO Adjust.
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/borrows'] = array(
    'title'            => 'Borrows settings',
    'description'      => 'Configure Borrows module.',
    'access arguments' => array('administer borrows configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('borrows_admin_form'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'borrows.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function borrows_perm() {
  return array('administer borrows configuration');
}

/**
 * Implementation of hook_calendar_block().
 */
function borrows_calendar_block(&$calendar, &$date, $op) {
  switch($op) {
    case 'load':
      $path = drupal_get_path('module', 'borrows');
      drupal_add_css($path . '/css/borrows.css');
      drupal_add_js($path . '/js/jquery.blockUI.js');
      drupal_add_js($path . '/js/borrows.js', 'module', 'footer');
      drupal_add_js(array('borrows' => borrows_get_settings()), 'setting', 'footer');
      $calendar->nid = arg(1);
      break;
    case 'alter':
      //dpm($date);
      //dpm($calendar);

      $is_weekend = in_array($date->weekday, array('sa', 'su'));

      // Do not allow booking for past days, today and tomorrow.
      // strtotime() needs a bit of help.
      $is_allowed = (strtotime($date->day . '-' . $date->month . '-' . $date->year) >= (strtotime('tomorrow') + (24 * 60 * 60)));

      // Convert to hungarian date format to make comparison easy.
      $date_hu = date('Y-m-d', strtotime($date->year . '-' . $date->month . '-' . $date->day));

      // Mark weekday as weekend, if $day is a public holiday.
      if (!$is_weekend) {
        $holidays = explode("\r\n", variable_get('borrows_holidays', NULL));
        if (in_array($date_hu, array_values((array)$holidays))) {
          $is_weekend = TRUE;
        }
      }
      // Remove weekday flag, if $day is a working day.
      if ($is_weekend) {
        $weekends = explode("\r\n", variable_get('borrows_weekends', NULL));
        if (in_array($date_hu, array_values((array)$weekends))) {
          $is_weekend = FALSE;
        }
      }

      // Check if current day is bookable using bookingsapi.
      $record = array(
        'resource_id' => $calendar->nid,
        'start' => $date_hu . ' 01:00:00',
        'end' => $date_hu . ' 23:59:59',
      );
      $is_bookable = (bookingsapi_conflict_check($record) == BOOKINGSAPI_CONFLICTS_NO);

      if ($is_allowed) {
        if ($is_bookable) {
          $class = 'form-checkbox';
          // Mark weekends with a nice class.
          if ($is_weekend) {
            $class .= ' borrows-weekend';
          }

          $date->content  = '<label class="option" for="' . $date_hu . '">';
          $date->content .= '<input type="checkbox" name="borrowdate[' . $date_hu . ']" value="' . $date_hu . '" id="borrowdate-' . $date_hu. '" class="' . $class . '" />';
          $date->content .= $date->day . '</label>';
        }
        else {
          $date->content = '<span class="borrows-booked">' . $date->day . '</span>';
        }
      }
      break;
  }
}

/**
 * AJAX callback.
 * @return Number of allowed days for a booking.
 */
function borrows_ajax($nid = NULL) {
  if ($node = node_load($nid)) {
    if ($node->type == BORROWS_RESOURCE_CT) {
      $node_allowed_days = $node->field_allowed_days[0]['value'];

      // @TODO implement this using bookingsapi.
      $days_till_next_booking = 30;

      $prebooking = variable_get('borrows_prebooking', BORROWS_PREBOOKING_DAYS);

      $booking_info = array(
        'allowed_days' => min($node_allowed_days, $days_till_next_booking, $prebooking),
      );

      return drupal_json($booking_info);
    }
  }
  return drupal_json();
}

/**
 * Handle the AJAX request.
 */
function borrows_booking() {
  global $user;
  //dd($_POST['days']);
  // @TODO Authenticate using the AJAX token.
  /*
  if (!borrows_ajax_auth()) {
    return FALSE;
  }
  */

  $days = json_decode($_POST['days'], TRUE);
  $nid = $_POST['nid'];
  if (!is_array($days)) {
    return _borrows_booking_response(FALSE, t('Invalid dates.'));
  }

  $node = node_load($nid);
  // And here we go.
  $booking = array(
    'resource_id' => $nid,
    'type' => BOOKINGSAPI_BOOKING,
    'name' => check_plain($user->name) . ', ' . check_plain($node->title) . $days['start'] . '-' . $days['end'],
    //'description' => '',
    'start' => $days['start'] . ' 01:00:00',
    'end' => $days['end'] . ' 23:59:59',
    'status' => BOOKINGSAPI_STATUS_FINALIZED,
  );

  $booking_result = bookingsapi_booking_save($booking);
  $success = $booking_result[0];
  // We've got some problem.
  if ($booking_result[0] === FALSE) {
    // SQL issue.
    if ($booking_result[1] === FALSE) {
      $message = t('SQL issue.');
    }
    // Conflict.
    $message = bookingsapi_conflict_type($booking_result[1]);
  }

  return _borrows_booking_response($success, $message);
}

/**
 * Get couple settings for client side actions.
 */
function borrows_get_settings() {
  $node = menu_get_object();
  $holidays = explode("\r\n", variable_get('borrows_holidays', NULL));
  $weekends = explode("\r\n", variable_get('borrows_weekends', NULL));
  return array(
    'holidays' => $holidays,
    'weekends' => $weekends,
    'nid' => $node->nid,
    'ajax_path' => url('borrows_booking'),
  );
}

/**
 * Private function that returns a booking result in JSON.
 * @param $success
 *  Boolean, whether booking was successful.
 * @param $message
 *  String, if $success == FALSE then it holds a short error message.
 * @return
 *  JSON object, {success, message}.
 */
function _borrows_booking_response($success = TRUE, $message = NULL) {
  $response = array(
    'success' => $success,
    'message' => $message,
  );
  return drupal_json($response);
}
